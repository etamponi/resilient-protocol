# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cppbridge', [dirname(__file__)])
        except ImportError:
            import _cppbridge
            return _cppbridge
        if fp is not None:
            try:
                _mod = imp.load_module('_cppbridge', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cppbridge = swig_import_helper()
    del swig_import_helper
else:
    import _cppbridge
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cppbridge.SwigPyIterator_value(self)
    def incr(self, n=1): return _cppbridge.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cppbridge.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cppbridge.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cppbridge.SwigPyIterator_equal(self, *args)
    def copy(self): return _cppbridge.SwigPyIterator_copy(self)
    def next(self): return _cppbridge.SwigPyIterator_next(self)
    def __next__(self): return _cppbridge.SwigPyIterator___next__(self)
    def previous(self): return _cppbridge.SwigPyIterator_previous(self)
    def advance(self, *args): return _cppbridge.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cppbridge.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cppbridge.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cppbridge.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cppbridge.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cppbridge.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cppbridge.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cppbridge.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorParametrized(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorParametrized, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorParametrized, name)
    __repr__ = _swig_repr
    def iterator(self): return _cppbridge.VectorParametrized_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cppbridge.VectorParametrized___nonzero__(self)
    def __bool__(self): return _cppbridge.VectorParametrized___bool__(self)
    def __len__(self): return _cppbridge.VectorParametrized___len__(self)
    def pop(self): return _cppbridge.VectorParametrized_pop(self)
    def __getslice__(self, *args): return _cppbridge.VectorParametrized___getslice__(self, *args)
    def __setslice__(self, *args): return _cppbridge.VectorParametrized___setslice__(self, *args)
    def __delslice__(self, *args): return _cppbridge.VectorParametrized___delslice__(self, *args)
    def __delitem__(self, *args): return _cppbridge.VectorParametrized___delitem__(self, *args)
    def __getitem__(self, *args): return _cppbridge.VectorParametrized___getitem__(self, *args)
    def __setitem__(self, *args): return _cppbridge.VectorParametrized___setitem__(self, *args)
    def append(self, *args): return _cppbridge.VectorParametrized_append(self, *args)
    def empty(self): return _cppbridge.VectorParametrized_empty(self)
    def size(self): return _cppbridge.VectorParametrized_size(self)
    def clear(self): return _cppbridge.VectorParametrized_clear(self)
    def swap(self, *args): return _cppbridge.VectorParametrized_swap(self, *args)
    def get_allocator(self): return _cppbridge.VectorParametrized_get_allocator(self)
    def begin(self): return _cppbridge.VectorParametrized_begin(self)
    def end(self): return _cppbridge.VectorParametrized_end(self)
    def rbegin(self): return _cppbridge.VectorParametrized_rbegin(self)
    def rend(self): return _cppbridge.VectorParametrized_rend(self)
    def pop_back(self): return _cppbridge.VectorParametrized_pop_back(self)
    def erase(self, *args): return _cppbridge.VectorParametrized_erase(self, *args)
    def __init__(self, *args): 
        this = _cppbridge.new_VectorParametrized(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cppbridge.VectorParametrized_push_back(self, *args)
    def front(self): return _cppbridge.VectorParametrized_front(self)
    def back(self): return _cppbridge.VectorParametrized_back(self)
    def assign(self, *args): return _cppbridge.VectorParametrized_assign(self, *args)
    def resize(self, *args): return _cppbridge.VectorParametrized_resize(self, *args)
    def insert(self, *args): return _cppbridge.VectorParametrized_insert(self, *args)
    def reserve(self, *args): return _cppbridge.VectorParametrized_reserve(self, *args)
    def capacity(self): return _cppbridge.VectorParametrized_capacity(self)
    __swig_destroy__ = _cppbridge.delete_VectorParametrized
    __del__ = lambda self : None;
VectorParametrized_swigregister = _cppbridge.VectorParametrized_swigregister
VectorParametrized_swigregister(VectorParametrized)

class VectorBaseNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBaseNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBaseNetwork, name)
    __repr__ = _swig_repr
    def iterator(self): return _cppbridge.VectorBaseNetwork_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cppbridge.VectorBaseNetwork___nonzero__(self)
    def __bool__(self): return _cppbridge.VectorBaseNetwork___bool__(self)
    def __len__(self): return _cppbridge.VectorBaseNetwork___len__(self)
    def pop(self): return _cppbridge.VectorBaseNetwork_pop(self)
    def __getslice__(self, *args): return _cppbridge.VectorBaseNetwork___getslice__(self, *args)
    def __setslice__(self, *args): return _cppbridge.VectorBaseNetwork___setslice__(self, *args)
    def __delslice__(self, *args): return _cppbridge.VectorBaseNetwork___delslice__(self, *args)
    def __delitem__(self, *args): return _cppbridge.VectorBaseNetwork___delitem__(self, *args)
    def __getitem__(self, *args): return _cppbridge.VectorBaseNetwork___getitem__(self, *args)
    def __setitem__(self, *args): return _cppbridge.VectorBaseNetwork___setitem__(self, *args)
    def append(self, *args): return _cppbridge.VectorBaseNetwork_append(self, *args)
    def empty(self): return _cppbridge.VectorBaseNetwork_empty(self)
    def size(self): return _cppbridge.VectorBaseNetwork_size(self)
    def clear(self): return _cppbridge.VectorBaseNetwork_clear(self)
    def swap(self, *args): return _cppbridge.VectorBaseNetwork_swap(self, *args)
    def get_allocator(self): return _cppbridge.VectorBaseNetwork_get_allocator(self)
    def begin(self): return _cppbridge.VectorBaseNetwork_begin(self)
    def end(self): return _cppbridge.VectorBaseNetwork_end(self)
    def rbegin(self): return _cppbridge.VectorBaseNetwork_rbegin(self)
    def rend(self): return _cppbridge.VectorBaseNetwork_rend(self)
    def pop_back(self): return _cppbridge.VectorBaseNetwork_pop_back(self)
    def erase(self, *args): return _cppbridge.VectorBaseNetwork_erase(self, *args)
    def __init__(self, *args): 
        this = _cppbridge.new_VectorBaseNetwork(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cppbridge.VectorBaseNetwork_push_back(self, *args)
    def front(self): return _cppbridge.VectorBaseNetwork_front(self)
    def back(self): return _cppbridge.VectorBaseNetwork_back(self)
    def assign(self, *args): return _cppbridge.VectorBaseNetwork_assign(self, *args)
    def resize(self, *args): return _cppbridge.VectorBaseNetwork_resize(self, *args)
    def insert(self, *args): return _cppbridge.VectorBaseNetwork_insert(self, *args)
    def reserve(self, *args): return _cppbridge.VectorBaseNetwork_reserve(self, *args)
    def capacity(self): return _cppbridge.VectorBaseNetwork_capacity(self)
    __swig_destroy__ = _cppbridge.delete_VectorBaseNetwork
    __del__ = lambda self : None;
VectorBaseNetwork_swigregister = _cppbridge.VectorBaseNetwork_swigregister
VectorBaseNetwork_swigregister(VectorBaseNetwork)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _cppbridge.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cppbridge.VectorInt___nonzero__(self)
    def __bool__(self): return _cppbridge.VectorInt___bool__(self)
    def __len__(self): return _cppbridge.VectorInt___len__(self)
    def pop(self): return _cppbridge.VectorInt_pop(self)
    def __getslice__(self, *args): return _cppbridge.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _cppbridge.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _cppbridge.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _cppbridge.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _cppbridge.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _cppbridge.VectorInt___setitem__(self, *args)
    def append(self, *args): return _cppbridge.VectorInt_append(self, *args)
    def empty(self): return _cppbridge.VectorInt_empty(self)
    def size(self): return _cppbridge.VectorInt_size(self)
    def clear(self): return _cppbridge.VectorInt_clear(self)
    def swap(self, *args): return _cppbridge.VectorInt_swap(self, *args)
    def get_allocator(self): return _cppbridge.VectorInt_get_allocator(self)
    def begin(self): return _cppbridge.VectorInt_begin(self)
    def end(self): return _cppbridge.VectorInt_end(self)
    def rbegin(self): return _cppbridge.VectorInt_rbegin(self)
    def rend(self): return _cppbridge.VectorInt_rend(self)
    def pop_back(self): return _cppbridge.VectorInt_pop_back(self)
    def erase(self, *args): return _cppbridge.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _cppbridge.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cppbridge.VectorInt_push_back(self, *args)
    def front(self): return _cppbridge.VectorInt_front(self)
    def back(self): return _cppbridge.VectorInt_back(self)
    def assign(self, *args): return _cppbridge.VectorInt_assign(self, *args)
    def resize(self, *args): return _cppbridge.VectorInt_resize(self, *args)
    def insert(self, *args): return _cppbridge.VectorInt_insert(self, *args)
    def reserve(self, *args): return _cppbridge.VectorInt_reserve(self, *args)
    def capacity(self): return _cppbridge.VectorInt_capacity(self)
    __swig_destroy__ = _cppbridge.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _cppbridge.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _cppbridge.VectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cppbridge.VectorDouble___nonzero__(self)
    def __bool__(self): return _cppbridge.VectorDouble___bool__(self)
    def __len__(self): return _cppbridge.VectorDouble___len__(self)
    def pop(self): return _cppbridge.VectorDouble_pop(self)
    def __getslice__(self, *args): return _cppbridge.VectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _cppbridge.VectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _cppbridge.VectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _cppbridge.VectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _cppbridge.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _cppbridge.VectorDouble___setitem__(self, *args)
    def append(self, *args): return _cppbridge.VectorDouble_append(self, *args)
    def empty(self): return _cppbridge.VectorDouble_empty(self)
    def size(self): return _cppbridge.VectorDouble_size(self)
    def clear(self): return _cppbridge.VectorDouble_clear(self)
    def swap(self, *args): return _cppbridge.VectorDouble_swap(self, *args)
    def get_allocator(self): return _cppbridge.VectorDouble_get_allocator(self)
    def begin(self): return _cppbridge.VectorDouble_begin(self)
    def end(self): return _cppbridge.VectorDouble_end(self)
    def rbegin(self): return _cppbridge.VectorDouble_rbegin(self)
    def rend(self): return _cppbridge.VectorDouble_rend(self)
    def pop_back(self): return _cppbridge.VectorDouble_pop_back(self)
    def erase(self, *args): return _cppbridge.VectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _cppbridge.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cppbridge.VectorDouble_push_back(self, *args)
    def front(self): return _cppbridge.VectorDouble_front(self)
    def back(self): return _cppbridge.VectorDouble_back(self)
    def assign(self, *args): return _cppbridge.VectorDouble_assign(self, *args)
    def resize(self, *args): return _cppbridge.VectorDouble_resize(self, *args)
    def insert(self, *args): return _cppbridge.VectorDouble_insert(self, *args)
    def reserve(self, *args): return _cppbridge.VectorDouble_reserve(self, *args)
    def capacity(self): return _cppbridge.VectorDouble_capacity(self)
    __swig_destroy__ = _cppbridge.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _cppbridge.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def append(self, *args): return _cppbridge.Buffer_append(self, *args)
    __swig_destroy__ = _cppbridge.delete_Buffer
    __del__ = lambda self : None;
Buffer_swigregister = _cppbridge.Buffer_swigregister
Buffer_swigregister(Buffer)

class Component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Simple = _cppbridge.Component_Simple
    ErrorAgnostic = _cppbridge.Component_ErrorAgnostic
    Sequential = _cppbridge.Component_Sequential
    SequentialErrorAgnostic = _cppbridge.Component_SequentialErrorAgnostic
    __swig_destroy__ = _cppbridge.delete_Component
    __del__ = lambda self : None;
    def forward(self): return _cppbridge.Component_forward(self)
    def backward(self): return _cppbridge.Component_backward(self)
    def dry_forward(self): return _cppbridge.Component_dry_forward(self)
    def dry_backward(self): return _cppbridge.Component_dry_backward(self)
    def set_mode(self, *args): return _cppbridge.Component_set_mode(self, *args)
    def clear(self): return _cppbridge.Component_clear(self)
    def get_mode(self): return _cppbridge.Component_get_mode(self)
    def sequential(self): return _cppbridge.Component_sequential(self)
    def timestep(self): return _cppbridge.Component_timestep(self)
    def sequencelength(self): return _cppbridge.Component_sequencelength(self)
    def error_agnostic(self): return _cppbridge.Component_error_agnostic(self)
Component_swigregister = _cppbridge.Component_swigregister
Component_swigregister(Component)

class Module(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_Module
    __del__ = lambda self : None;
    def forward(self): return _cppbridge.Module_forward(self)
    def add_to_input(self, *args): return _cppbridge.Module_add_to_input(self, *args)
    def add_to_outerror(self, *args): return _cppbridge.Module_add_to_outerror(self, *args)
    def clear(self): return _cppbridge.Module_clear(self)
    def input(self): return _cppbridge.Module_input(self)
    def output(self): return _cppbridge.Module_output(self)
    def inerror(self): return _cppbridge.Module_inerror(self)
    def outerror(self): return _cppbridge.Module_outerror(self)
    def insize(self): return _cppbridge.Module_insize(self)
    def outsize(self): return _cppbridge.Module_outsize(self)
    def last_timestep(self): return _cppbridge.Module_last_timestep(self)
    def init_input(self, *args): return _cppbridge.Module_init_input(self, *args)
    def init_output(self, *args): return _cppbridge.Module_init_output(self, *args)
    def init_inerror(self, *args): return _cppbridge.Module_init_inerror(self, *args)
    def init_outerror(self, *args): return _cppbridge.Module_init_outerror(self, *args)
Module_swigregister = _cppbridge.Module_swigregister
Module_swigregister(Module)

class Parametrized(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parametrized, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parametrized, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_Parametrized(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _cppbridge.Parametrized_size(self)
    __swig_destroy__ = _cppbridge.delete_Parametrized
    __del__ = lambda self : None;
    def clear_derivatives(self): return _cppbridge.Parametrized_clear_derivatives(self)
    def get_parameters(self): return _cppbridge.Parametrized_get_parameters(self)
    def set_parameters(self, *args): return _cppbridge.Parametrized_set_parameters(self, *args)
    def get_derivatives(self): return _cppbridge.Parametrized_get_derivatives(self)
    def set_derivatives(self, *args): return _cppbridge.Parametrized_set_derivatives(self, *args)
Parametrized_swigregister = _cppbridge.Parametrized_swigregister
Parametrized_swigregister(Parametrized)

class Connection(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_Connection
    __del__ = lambda self : None;
    def set_incomingstart(self, *args): return _cppbridge.Connection_set_incomingstart(self, *args)
    def set_incomingstop(self, *args): return _cppbridge.Connection_set_incomingstop(self, *args)
    def set_outgoingstart(self, *args): return _cppbridge.Connection_set_outgoingstart(self, *args)
    def set_outgoingstop(self, *args): return _cppbridge.Connection_set_outgoingstop(self, *args)
    def get_incomingstart(self): return _cppbridge.Connection_get_incomingstart(self)
    def get_incomingstop(self): return _cppbridge.Connection_get_incomingstop(self)
    def get_outgoingstart(self): return _cppbridge.Connection_get_outgoingstart(self)
    def get_outgoingstop(self): return _cppbridge.Connection_get_outgoingstop(self)
    def set_recurrent(self, *args): return _cppbridge.Connection_set_recurrent(self, *args)
    def get_recurrent(self): return _cppbridge.Connection_get_recurrent(self)
    def incoming(self): return _cppbridge.Connection_incoming(self)
    def outgoing(self): return _cppbridge.Connection_outgoing(self)
Connection_swigregister = _cppbridge.Connection_swigregister
Connection_swigregister(Connection)

class IdentityConnection(Connection):
    __swig_setmethods__ = {}
    for _s in [Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_IdentityConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_IdentityConnection
    __del__ = lambda self : None;
IdentityConnection_swigregister = _cppbridge.IdentityConnection_swigregister
IdentityConnection_swigregister(IdentityConnection)

class Bias(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bias, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bias, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cppbridge.new_Bias()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_Bias
    __del__ = lambda self : None;
Bias_swigregister = _cppbridge.Bias_swigregister
Bias_swigregister(Bias)

class GateLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GateLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GateLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_GateLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_GateLayer
    __del__ = lambda self : None;
GateLayer_swigregister = _cppbridge.GateLayer_swigregister
GateLayer_swigregister(GateLayer)

class DoubleGateLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleGateLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleGateLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_DoubleGateLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_DoubleGateLayer
    __del__ = lambda self : None;
DoubleGateLayer_swigregister = _cppbridge.DoubleGateLayer_swigregister
DoubleGateLayer_swigregister(DoubleGateLayer)

class MultiplicationLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplicationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplicationLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_MultiplicationLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_MultiplicationLayer
    __del__ = lambda self : None;
MultiplicationLayer_swigregister = _cppbridge.MultiplicationLayer_swigregister
MultiplicationLayer_swigregister(MultiplicationLayer)

class SwitchLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SwitchLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SwitchLayer
    __del__ = lambda self : None;
SwitchLayer_swigregister = _cppbridge.SwitchLayer_swigregister
SwitchLayer_swigregister(SwitchLayer)

class LinearLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_LinearLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_LinearLayer
    __del__ = lambda self : None;
LinearLayer_swigregister = _cppbridge.LinearLayer_swigregister
LinearLayer_swigregister(LinearLayer)

class ErrorScalingLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorScalingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorScalingLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_ErrorScalingLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_ErrorScalingLayer
    __del__ = lambda self : None;
ErrorScalingLayer_swigregister = _cppbridge.ErrorScalingLayer_swigregister
ErrorScalingLayer_swigregister(ErrorScalingLayer)

class LstmLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LstmLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LstmLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_LstmLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_LstmLayer
    __del__ = lambda self : None;
    def init_state(self, *args): return _cppbridge.LstmLayer_init_state(self, *args)
    def init_state_error(self, *args): return _cppbridge.LstmLayer_init_state_error(self, *args)
LstmLayer_swigregister = _cppbridge.LstmLayer_swigregister
LstmLayer_swigregister(LstmLayer)

class MdlstmLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MdlstmLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MdlstmLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_MdlstmLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_MdlstmLayer
    __del__ = lambda self : None;
    def init_input_squashed(self, *args): return _cppbridge.MdlstmLayer_init_input_squashed(self, *args)
    def init_input_gate_squashed(self, *args): return _cppbridge.MdlstmLayer_init_input_gate_squashed(self, *args)
    def init_input_gate_unsquashed(self, *args): return _cppbridge.MdlstmLayer_init_input_gate_unsquashed(self, *args)
    def init_output_gate_squashed(self, *args): return _cppbridge.MdlstmLayer_init_output_gate_squashed(self, *args)
    def init_output_gate_unsquashed(self, *args): return _cppbridge.MdlstmLayer_init_output_gate_unsquashed(self, *args)
    def init_forget_gate_unsquashed(self, *args): return _cppbridge.MdlstmLayer_init_forget_gate_unsquashed(self, *args)
    def init_forget_gate_squashed(self, *args): return _cppbridge.MdlstmLayer_init_forget_gate_squashed(self, *args)
MdlstmLayer_swigregister = _cppbridge.MdlstmLayer_swigregister
MdlstmLayer_swigregister(MdlstmLayer)

class PartialSoftmaxLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartialSoftmaxLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartialSoftmaxLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_PartialSoftmaxLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_PartialSoftmaxLayer
    __del__ = lambda self : None;
PartialSoftmaxLayer_swigregister = _cppbridge.PartialSoftmaxLayer_swigregister
PartialSoftmaxLayer_swigregister(PartialSoftmaxLayer)

class SigmoidLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SigmoidLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SigmoidLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SigmoidLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SigmoidLayer
    __del__ = lambda self : None;
SigmoidLayer_swigregister = _cppbridge.SigmoidLayer_swigregister
SigmoidLayer_swigregister(SigmoidLayer)

class CosineLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosineLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_CosineLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_CosineLayer
    __del__ = lambda self : None;
CosineLayer_swigregister = _cppbridge.CosineLayer_swigregister
CosineLayer_swigregister(CosineLayer)

class SoftmaxLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftmaxLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftmaxLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SoftmaxLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SoftmaxLayer
    __del__ = lambda self : None;
SoftmaxLayer_swigregister = _cppbridge.SoftmaxLayer_swigregister
SoftmaxLayer_swigregister(SoftmaxLayer)

class TanhLayer(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanhLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanhLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_TanhLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_TanhLayer
    __del__ = lambda self : None;
TanhLayer_swigregister = _cppbridge.TanhLayer_swigregister
TanhLayer_swigregister(TanhLayer)

class BaseNetwork(Module):
    __swig_setmethods__ = {}
    for _s in [Module]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseNetwork, name, value)
    __swig_getmethods__ = {}
    for _s in [Module]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseNetwork, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_BaseNetwork
    __del__ = lambda self : None;
    def forward(self): return _cppbridge.BaseNetwork_forward(self)
    def parametrizeds(self): return _cppbridge.BaseNetwork_parametrizeds(self)
    def networks(self): return _cppbridge.BaseNetwork_networks(self)
    def sort(self): return _cppbridge.BaseNetwork_sort(self)
    def randomize(self): return _cppbridge.BaseNetwork_randomize(self)
    def activate(self, *args): return _cppbridge.BaseNetwork_activate(self, *args)
    def back_activate(self, *args): return _cppbridge.BaseNetwork_back_activate(self, *args)
BaseNetwork_swigregister = _cppbridge.BaseNetwork_swigregister
BaseNetwork_swigregister(BaseNetwork)

class FullConnection(Connection,Parametrized):
    __swig_setmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FullConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FullConnection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_FullConnection
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cppbridge.new_FullConnection(*args)
        try: self.this.append(this)
        except: self.this = this
FullConnection_swigregister = _cppbridge.FullConnection_swigregister
FullConnection_swigregister(FullConnection)

class LinearConnection(Connection,Parametrized):
    __swig_setmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearConnection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_LinearConnection
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cppbridge.new_LinearConnection(*args)
        try: self.this.append(this)
        except: self.this = this
LinearConnection_swigregister = _cppbridge.LinearConnection_swigregister
LinearConnection_swigregister(LinearConnection)

class BlockPermutationConnection(Connection):
    __swig_setmethods__ = {}
    for _s in [Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockPermutationConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockPermutationConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_BlockPermutationConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_BlockPermutationConnection
    __del__ = lambda self : None;
    def permutation(self): return _cppbridge.BlockPermutationConnection_permutation(self)
    def invert(self): return _cppbridge.BlockPermutationConnection_invert(self)
BlockPermutationConnection_swigregister = _cppbridge.BlockPermutationConnection_swigregister
BlockPermutationConnection_swigregister(BlockPermutationConnection)

class PermutationConnection(Connection):
    __swig_setmethods__ = {}
    for _s in [Connection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PermutationConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PermutationConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_PermutationConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_PermutationConnection
    __del__ = lambda self : None;
    def permutation(self): return _cppbridge.PermutationConnection_permutation(self)
    def invert(self): return _cppbridge.PermutationConnection_invert(self)
PermutationConnection_swigregister = _cppbridge.PermutationConnection_swigregister
PermutationConnection_swigregister(PermutationConnection)

class ConvolveConnection(Connection,Parametrized):
    __swig_setmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvolveConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvolveConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_ConvolveConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_ConvolveConnection
    __del__ = lambda self : None;
ConvolveConnection_swigregister = _cppbridge.ConvolveConnection_swigregister
ConvolveConnection_swigregister(ConvolveConnection)

class InConvolveConnection(Connection,Parametrized):
    __swig_setmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InConvolveConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InConvolveConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_InConvolveConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_InConvolveConnection
    __del__ = lambda self : None;
InConvolveConnection_swigregister = _cppbridge.InConvolveConnection_swigregister
InConvolveConnection_swigregister(InConvolveConnection)

class OutConvolveConnection(Connection,Parametrized):
    __swig_setmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutConvolveConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection,Parametrized]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutConvolveConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_OutConvolveConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_OutConvolveConnection
    __del__ = lambda self : None;
OutConvolveConnection_swigregister = _cppbridge.OutConvolveConnection_swigregister
OutConvolveConnection_swigregister(OutConvolveConnection)

class Network(BaseNetwork):
    __swig_setmethods__ = {}
    for _s in [BaseNetwork]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseNetwork]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    Simple = _cppbridge.Network_Simple
    InputModule = _cppbridge.Network_InputModule
    OutputModule = _cppbridge.Network_OutputModule
    InputOutputModule = _cppbridge.Network_InputOutputModule
    def __init__(self): 
        this = _cppbridge.new_Network()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_Network
    __del__ = lambda self : None;
    def clear(self): return _cppbridge.Network_clear(self)
    def clear_derivatives(self): return _cppbridge.Network_clear_derivatives(self)
    def add_module(self, *args): return _cppbridge.Network_add_module(self, *args)
    def add_connection(self, *args): return _cppbridge.Network_add_connection(self, *args)
    def sort(self): return _cppbridge.Network_sort(self)
Network_swigregister = _cppbridge.Network_swigregister
Network_swigregister(Network)

class BaseMdrnn(BaseNetwork):
    __swig_setmethods__ = {}
    for _s in [BaseNetwork]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseMdrnn, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseNetwork]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseMdrnn, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cppbridge.delete_BaseMdrnn
    __del__ = lambda self : None;
BaseMdrnn_swigregister = _cppbridge.BaseMdrnn_swigregister
BaseMdrnn_swigregister(BaseMdrnn)

class SigmoidMdrnn(BaseMdrnn):
    __swig_setmethods__ = {}
    for _s in [BaseMdrnn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SigmoidMdrnn, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMdrnn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SigmoidMdrnn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SigmoidMdrnn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SigmoidMdrnn
    __del__ = lambda self : None;
    def sort(self): return _cppbridge.SigmoidMdrnn_sort(self)
    def set_sequence_shape(self, *args): return _cppbridge.SigmoidMdrnn_set_sequence_shape(self, *args)
    def get_sequence_shape(self, *args): return _cppbridge.SigmoidMdrnn_get_sequence_shape(self, *args)
    def sequencelength(self): return _cppbridge.SigmoidMdrnn_sequencelength(self)
    def set_block_shape(self, *args): return _cppbridge.SigmoidMdrnn_set_block_shape(self, *args)
    def get_block_shape(self, *args): return _cppbridge.SigmoidMdrnn_get_block_shape(self, *args)
SigmoidMdrnn_swigregister = _cppbridge.SigmoidMdrnn_swigregister
SigmoidMdrnn_swigregister(SigmoidMdrnn)

class TanhMdrnn(BaseMdrnn):
    __swig_setmethods__ = {}
    for _s in [BaseMdrnn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanhMdrnn, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMdrnn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanhMdrnn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_TanhMdrnn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_TanhMdrnn
    __del__ = lambda self : None;
    def sort(self): return _cppbridge.TanhMdrnn_sort(self)
    def set_sequence_shape(self, *args): return _cppbridge.TanhMdrnn_set_sequence_shape(self, *args)
    def get_sequence_shape(self, *args): return _cppbridge.TanhMdrnn_get_sequence_shape(self, *args)
    def sequencelength(self): return _cppbridge.TanhMdrnn_sequencelength(self)
    def set_block_shape(self, *args): return _cppbridge.TanhMdrnn_set_block_shape(self, *args)
    def get_block_shape(self, *args): return _cppbridge.TanhMdrnn_get_block_shape(self, *args)
TanhMdrnn_swigregister = _cppbridge.TanhMdrnn_swigregister
TanhMdrnn_swigregister(TanhMdrnn)

class LinearMdrnn(BaseMdrnn):
    __swig_setmethods__ = {}
    for _s in [BaseMdrnn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearMdrnn, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMdrnn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearMdrnn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_LinearMdrnn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_LinearMdrnn
    __del__ = lambda self : None;
    def sort(self): return _cppbridge.LinearMdrnn_sort(self)
    def set_sequence_shape(self, *args): return _cppbridge.LinearMdrnn_set_sequence_shape(self, *args)
    def get_sequence_shape(self, *args): return _cppbridge.LinearMdrnn_get_sequence_shape(self, *args)
    def sequencelength(self): return _cppbridge.LinearMdrnn_sequencelength(self)
    def set_block_shape(self, *args): return _cppbridge.LinearMdrnn_set_block_shape(self, *args)
    def get_block_shape(self, *args): return _cppbridge.LinearMdrnn_get_block_shape(self, *args)
LinearMdrnn_swigregister = _cppbridge.LinearMdrnn_swigregister
LinearMdrnn_swigregister(LinearMdrnn)

class MdlstmMdrnn(BaseMdrnn):
    __swig_setmethods__ = {}
    for _s in [BaseMdrnn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MdlstmMdrnn, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMdrnn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MdlstmMdrnn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_MdlstmMdrnn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_MdlstmMdrnn
    __del__ = lambda self : None;
    def sort(self): return _cppbridge.MdlstmMdrnn_sort(self)
    def set_sequence_shape(self, *args): return _cppbridge.MdlstmMdrnn_set_sequence_shape(self, *args)
    def get_sequence_shape(self, *args): return _cppbridge.MdlstmMdrnn_get_sequence_shape(self, *args)
    def sequencelength(self): return _cppbridge.MdlstmMdrnn_sequencelength(self)
    def set_block_shape(self, *args): return _cppbridge.MdlstmMdrnn_set_block_shape(self, *args)
    def get_block_shape(self, *args): return _cppbridge.MdlstmMdrnn_get_block_shape(self, *args)
MdlstmMdrnn_swigregister = _cppbridge.MdlstmMdrnn_swigregister
MdlstmMdrnn_swigregister(MdlstmMdrnn)

class SupervisedSimpleDataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupervisedSimpleDataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupervisedSimpleDataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SupervisedSimpleDataset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SupervisedSimpleDataset
    __del__ = lambda self : None;
    def size(self): return _cppbridge.SupervisedSimpleDataset_size(self)
    def samplesize(self): return _cppbridge.SupervisedSimpleDataset_samplesize(self)
    def targetsize(self): return _cppbridge.SupervisedSimpleDataset_targetsize(self)
    def has_importance(self): return _cppbridge.SupervisedSimpleDataset_has_importance(self)
    def append(self, *args): return _cppbridge.SupervisedSimpleDataset_append(self, *args)
    def set_importance(self, *args): return _cppbridge.SupervisedSimpleDataset_set_importance(self, *args)
    def sample(self, *args): return _cppbridge.SupervisedSimpleDataset_sample(self, *args)
    def target(self, *args): return _cppbridge.SupervisedSimpleDataset_target(self, *args)
    def importance(self, *args): return _cppbridge.SupervisedSimpleDataset_importance(self, *args)
SupervisedSimpleDataset_swigregister = _cppbridge.SupervisedSimpleDataset_swigregister
SupervisedSimpleDataset_swigregister(SupervisedSimpleDataset)

class SupervisedSemiSequentialDataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupervisedSemiSequentialDataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupervisedSemiSequentialDataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SupervisedSemiSequentialDataset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SupervisedSemiSequentialDataset
    __del__ = lambda self : None;
    def size(self): return _cppbridge.SupervisedSemiSequentialDataset_size(self)
    def samplesize(self): return _cppbridge.SupervisedSemiSequentialDataset_samplesize(self)
    def targetsize(self): return _cppbridge.SupervisedSemiSequentialDataset_targetsize(self)
    def append(self, *args): return _cppbridge.SupervisedSemiSequentialDataset_append(self, *args)
    def sample(self, *args): return _cppbridge.SupervisedSemiSequentialDataset_sample(self, *args)
    def target(self, *args): return _cppbridge.SupervisedSemiSequentialDataset_target(self, *args)
SupervisedSemiSequentialDataset_swigregister = _cppbridge.SupervisedSemiSequentialDataset_swigregister
SupervisedSemiSequentialDataset_swigregister(SupervisedSemiSequentialDataset)

class SupervisedSequentialDataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupervisedSequentialDataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupervisedSequentialDataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SupervisedSequentialDataset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SupervisedSequentialDataset
    __del__ = lambda self : None;
    def size(self): return _cppbridge.SupervisedSequentialDataset_size(self)
    def samplesize(self): return _cppbridge.SupervisedSequentialDataset_samplesize(self)
    def targetsize(self): return _cppbridge.SupervisedSequentialDataset_targetsize(self)
    def append(self, *args): return _cppbridge.SupervisedSequentialDataset_append(self, *args)
    def sample(self, *args): return _cppbridge.SupervisedSequentialDataset_sample(self, *args)
    def target(self, *args): return _cppbridge.SupervisedSequentialDataset_target(self, *args)
SupervisedSequentialDataset_swigregister = _cppbridge.SupervisedSequentialDataset_swigregister
SupervisedSequentialDataset_swigregister(SupervisedSequentialDataset)

class SimpleBackprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleBackprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleBackprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SimpleBackprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SimpleBackprop
    __del__ = lambda self : None;
    def train_stochastic(self): return _cppbridge.SimpleBackprop_train_stochastic(self)
    def train_stochastic_batch(self): return _cppbridge.SimpleBackprop_train_stochastic_batch(self)
    def loss(self): return _cppbridge.SimpleBackprop_loss(self)
    def learningrate(self): return _cppbridge.SimpleBackprop_learningrate(self)
    def set_learningrate(self, *args): return _cppbridge.SimpleBackprop_set_learningrate(self, *args)
    def momentum(self): return _cppbridge.SimpleBackprop_momentum(self)
    def set_momentum(self, *args): return _cppbridge.SimpleBackprop_set_momentum(self, *args)
    def network(self): return _cppbridge.SimpleBackprop_network(self)
    def dataset(self): return _cppbridge.SimpleBackprop_dataset(self)
    def error(self): return _cppbridge.SimpleBackprop_error(self)
SimpleBackprop_swigregister = _cppbridge.SimpleBackprop_swigregister
SimpleBackprop_swigregister(SimpleBackprop)

class SemiSequentialBackprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SemiSequentialBackprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SemiSequentialBackprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SemiSequentialBackprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SemiSequentialBackprop
    __del__ = lambda self : None;
    def train_stochastic(self): return _cppbridge.SemiSequentialBackprop_train_stochastic(self)
    def learningrate(self): return _cppbridge.SemiSequentialBackprop_learningrate(self)
    def set_learningrate(self, *args): return _cppbridge.SemiSequentialBackprop_set_learningrate(self, *args)
    def momentum(self): return _cppbridge.SemiSequentialBackprop_momentum(self)
    def set_momentum(self, *args): return _cppbridge.SemiSequentialBackprop_set_momentum(self, *args)
    def network(self): return _cppbridge.SemiSequentialBackprop_network(self)
    def dataset(self): return _cppbridge.SemiSequentialBackprop_dataset(self)
    def lasterror(self): return _cppbridge.SemiSequentialBackprop_lasterror(self)
SemiSequentialBackprop_swigregister = _cppbridge.SemiSequentialBackprop_swigregister
SemiSequentialBackprop_swigregister(SemiSequentialBackprop)

class SequentialBackprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequentialBackprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequentialBackprop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cppbridge.new_SequentialBackprop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppbridge.delete_SequentialBackprop
    __del__ = lambda self : None;
    def train_stochastic(self): return _cppbridge.SequentialBackprop_train_stochastic(self)
    def learningrate(self): return _cppbridge.SequentialBackprop_learningrate(self)
    def set_learningrate(self, *args): return _cppbridge.SequentialBackprop_set_learningrate(self, *args)
    def momentum(self): return _cppbridge.SequentialBackprop_momentum(self)
    def set_momentum(self, *args): return _cppbridge.SequentialBackprop_set_momentum(self, *args)
    def network(self): return _cppbridge.SequentialBackprop_network(self)
    def dataset(self): return _cppbridge.SequentialBackprop_dataset(self)
SequentialBackprop_swigregister = _cppbridge.SequentialBackprop_swigregister
SequentialBackprop_swigregister(SequentialBackprop)


def gradient_check(*args):
  return _cppbridge.gradient_check(*args)
gradient_check = _cppbridge.gradient_check
# This file is compatible with both classic and new-style classes.


